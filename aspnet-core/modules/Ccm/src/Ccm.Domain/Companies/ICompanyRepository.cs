using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Volo.Abp.Domain.Repositories;

namespace Ccm.Companies
{
    public interface ICompanyRepository : IRepository<Company, Guid>
    {
        Task<List<Company>> GetListAsync(
            string filterText = null,
            string legalName = null,
            string companyCode = null,
            string street = null,
            string streetNumber = null,
            string zipCode = null,
            string city = null,
            string stateRegion = null,
            string country = null,
            bool? inEU = null,
            string taxNo = null,
            string travelAgencyCode = null,
            string invoicePrefix = null,
            string invoiceLegal1 = null,
            string invoiceLegal2 = null,
            string paymentInfo = null,
            string webSite = null,
            string companyEmail = null,
            string telephone = null,
            string fax = null,
            string facebookPage = null,
            string twiterPage = null,
            string instagram = null,
            string ceoName = null,
            string ceoEmail = null,
            string bookingEmail = null,
            bool? bookingEmailConfirmed = null,
            string bookingCellPhone = null,
            bool? bookingPhoneConfirmed = null,
            int? workingYearMin = null,
            int? workingYearMax = null,
            string tenantCurrency = null,
            int? roundingAfterExchangeMin = null,
            int? roundingAfterExchangeMax = null,
            decimal? defaultCruiseDepositMin = null,
            decimal? defaultCruiseDepositMax = null,
            decimal? defaultCharterDepositMin = null,
            decimal? defaultCharterDepositMax = null,
            string defaultCruiseDepositType = null,
            string defautCharterDepositType = null,
            int? requestDurationCruiseMin = null,
            int? requestDurationCruiseMax = null,
            int? requestDurationCharterMin = null,
            int? requestDurationCharterMax = null,
            int? optionDurationCruiseMin = null,
            int? optionDurationCruiseMax = null,
            int? optionDurationCharterMin = null,
            int? optionDurationCharterMax = null,
            int? cruiseFinalPaymentDueDaysMin = null,
            int? cruiseFinalPaymentDueDaysMax = null,
            int? charterFinalPaymentDueDaysMin = null,
            int? charterFinalPaymentDueDaysMax = null,
            int? cruiseFullPaymentRequiredDaysMin = null,
            int? cruiseFullPaymentRequiredDaysMax = null,
            int? charterFullPaymentRequiredDaysMin = null,
            int? charterFullPaymentRequiredDaysMax = null,
            string sorting = null,
            int maxResultCount = int.MaxValue,
            int skipCount = 0,
            CancellationToken cancellationToken = default
        );

        Task<long> GetCountAsync(
            string filterText = null,
            string legalName = null,
            string companyCode = null,
            string street = null,
            string streetNumber = null,
            string zipCode = null,
            string city = null,
            string stateRegion = null,
            string country = null,
            bool? inEU = null,
            string taxNo = null,
            string travelAgencyCode = null,
            string invoicePrefix = null,
            string invoiceLegal1 = null,
            string invoiceLegal2 = null,
            string paymentInfo = null,
            string webSite = null,
            string companyEmail = null,
            string telephone = null,
            string fax = null,
            string facebookPage = null,
            string twiterPage = null,
            string instagram = null,
            string ceoName = null,
            string ceoEmail = null,
            string bookingEmail = null,
            bool? bookingEmailConfirmed = null,
            string bookingCellPhone = null,
            bool? bookingPhoneConfirmed = null,
            int? workingYearMin = null,
            int? workingYearMax = null,
            string tenantCurrency = null,
            int? roundingAfterExchangeMin = null,
            int? roundingAfterExchangeMax = null,
            decimal? defaultCruiseDepositMin = null,
            decimal? defaultCruiseDepositMax = null,
            decimal? defaultCharterDepositMin = null,
            decimal? defaultCharterDepositMax = null,
            string defaultCruiseDepositType = null,
            string defautCharterDepositType = null,
            int? requestDurationCruiseMin = null,
            int? requestDurationCruiseMax = null,
            int? requestDurationCharterMin = null,
            int? requestDurationCharterMax = null,
            int? optionDurationCruiseMin = null,
            int? optionDurationCruiseMax = null,
            int? optionDurationCharterMin = null,
            int? optionDurationCharterMax = null,
            int? cruiseFinalPaymentDueDaysMin = null,
            int? cruiseFinalPaymentDueDaysMax = null,
            int? charterFinalPaymentDueDaysMin = null,
            int? charterFinalPaymentDueDaysMax = null,
            int? cruiseFullPaymentRequiredDaysMin = null,
            int? cruiseFullPaymentRequiredDaysMax = null,
            int? charterFullPaymentRequiredDaysMin = null,
            int? charterFullPaymentRequiredDaysMax = null,
            CancellationToken cancellationToken = default);
    }
}